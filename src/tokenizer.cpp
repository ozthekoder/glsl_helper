#include "tokenizer.hpp"

namespace glsl
{
const std::vector<Token> Tokenizer::tokens = {
    {std::string("SPACE"),
     std::string("\s+")},
    {std::string("DIGIT"),
     std::string("[0-9]")},
    {std::string("NONDIGIT"),
     std::string("[_a-zA-Z]")},
    {std::string("LEFT_OP"), std::string("<<")},
    {std::string("RIGHT_OP"), std::string(">>")},
    {std::string("INC_OP"), std::string("\\+\\+")},
    {std::string("DEC_OP"), std::string("--")},
    {std::string("LE_OP"), std::string("<=")},
    {std::string("GE_OP"), std::string(">=")},
    {std::string("EQ_OP"), std::string("==")},
    {std::string("NE_OP"), std::string("!=")},
    {std::string("AND_OP"), std::string("&&")},
    {std::string("OR_OP"), std::string("\\|\\|")},
    {std::string("XOR_OP"), std::string("\\^\\^")},
    {std::string("MUL_ASSIGN"), std::string("\\*=")},
    {std::string("DIV_ASSIGN"), std::string("\\/=")},
    {std::string("ADD_ASSIGN"), std::string("\\+=")},
    {std::string("MOD_ASSIGN"), std::string("%=")},
    {std::string("LEFT_ASSIGN"), std::string("<<=")},
    {std::string("RIGHT_ASSIGN"), std::string(">>=")},
    {std::string("AND_ASSIGN"), std::string("&=")},
    {std::string("XOR_ASSIGN"), std::string("\\^=")},
    {std::string("OR_ASSIGN"), std::string("\\|=")},
    {std::string("SUB_ASSIGN"), std::string("-=")},
    {std::string("PLUS"), std::string("\\+")},
    {std::string("DASH"), std::string("-")},
    {std::string("PERCENT"), std::string("%")},
    {std::string("STAR"), std::string("\\*")},
    {std::string("SLASH"), std::string("\\/")},
    {std::string("TILDE"), std::string("~")},
    {std::string("BANG"), std::string("!")},
    {std::string("CARET"), std::string("\\^")},
    {std::string("LEFT_PAREN"), std::string("\\(")},
    {std::string("RIGHT_PAREN"), std::string("\\)")},
    {std::string("LEFT_BRACE"), std::string("\\{")},
    {std::string("RIGHT_BRACE"), std::string("\\}")},
    {std::string("SEMICOLON"), std::string(";")},
    {std::string("LEFT_ANGLE"), std::string("<")},
    {std::string("RIGHT_ANGLE"), std::string(">")},
    {std::string("DOT"), std::string("\\.")},
    {std::string("COMMA"), std::string(",")},
    {std::string("LEFT_BRACKET"), std::string("\\[")},
    {std::string("RIGHT_BRACKET"), std::string("\\]")},
    {std::string("VERTICAL_BAR"), std::string("\\|")},
    {std::string("COLON"), std::string(":")},
    {std::string("EQUAL"), std::string("=")},
    {std::string("AMPERSAND"), std::string("&")},
    {std::string("QUESTION"), std::string("\\?")},
    {std::string("CONST"), std::string("const")},
    {std::string("UNIFORM"), std::string("uniform")},
    {std::string("BUFFER"), std::string("buffer")},
    {std::string("SHARED"), std::string("shared")},
    {std::string("COHERENT"), std::string("coherent")},
    {std::string("VOLATILE"), std::string("volatile")},
    {std::string("RESTRICT"), std::string("restrict")},
    {std::string("READONLY"), std::string("readonly")},
    {std::string("WRITEONLY"), std::string("writeonly")},
    {std::string("ATOMIC_UINT"), std::string("atomic_uint")},
    {std::string("LAYOUT"), std::string("layout")},
    {std::string("CENTROID"), std::string("centroid")},
    {std::string("FLAT"), std::string("flat")},
    {std::string("SMOOTH"), std::string("smooth")},
    {std::string("NOPERSPECTIVE"), std::string("noperspective")},
    {std::string("PATCH"), std::string("patch")},
    {std::string("SAMPLE"), std::string("sample")},
    {std::string("BREAK"), std::string("break")},
    {std::string("CONTINUE"), std::string("continue")},
    {std::string("DO"), std::string("do")},
    {std::string("FOR"), std::string("for")},
    {std::string("WHILE"), std::string("while")},
    {std::string("SWITCH"), std::string("switch")},
    {std::string("CASE"), std::string("case")},
    {std::string("DEFAULT"), std::string("default")},
    {std::string("IF"), std::string("if")},
    {std::string("ELSE"), std::string("else")},
    {std::string("SUBROUTINE"), std::string("subroutine")},
    {std::string("IN"), std::string("in")},
    {std::string("OUT"), std::string("out")},
    {std::string("INOUT"), std::string("inout")},
    {std::string("FLOAT"), std::string("float")},
    {std::string("DOUBLE"), std::string("double")},
    {std::string("INT"), std::string("int")},
    {std::string("VOID"), std::string("void")},
    {std::string("BOOL"), std::string("bool")},
    {std::string("INVARIANT"), std::string("invariant")},
    {std::string("PRECISE"), std::string("precise")},
    {std::string("DISCARD"), std::string("discard")},
    {std::string("RETURN"), std::string("return")},
    {std::string("MAT2"), std::string("mat2")},
    {std::string("MAT3"), std::string("mat3")},
    {std::string("MAT4"), std::string("mat4")},
    {std::string("DMAT2"), std::string("dmat2")},
    {std::string("DMAT3"), std::string("dmat3")},
    {std::string("DMAT4"), std::string("dmat4")},
    {std::string("MAT2X2"), std::string("mat2x2")},
    {std::string("MAT2X3"), std::string("mat2x3")},
    {std::string("MAT2X4"), std::string("mat2x4")},
    {std::string("DMAT2X2"), std::string("dmat2x2")},
    {std::string("DMAT2X3"), std::string("dmat2x3")},
    {std::string("DMAT2X4"), std::string("dmat2x4")},
    {std::string("MAT3X2"), std::string("mat3x2")},
    {std::string("MAT3X3"), std::string("mat3x3")},
    {std::string("MAT3X4"), std::string("mat3x4")},
    {std::string("DMAT3X2"), std::string("dmat3x2")},
    {std::string("DMAT3X3"), std::string("dmat3x3")},
    {std::string("DMAT3X4"), std::string("dmat3x4")},
    {std::string("MAT4X2"), std::string("mat4x2")},
    {std::string("MAT4X3"), std::string("mat4x3")},
    {std::string("MAT4X4"), std::string("mat4x4")},
    {std::string("DMAT4X2"), std::string("dmat4x2")},
    {std::string("DMAT4X3"), std::string("dmat4x3")},
    {std::string("DMAT4X4"), std::string("dmat4x4")},
    {std::string("VEC2"), std::string("vec2")},
    {std::string("VEC3"), std::string("vec3")},
    {std::string("VEC4"), std::string("vec4")},
    {std::string("IVEC2"), std::string("ivec2")},
    {std::string("IVEC3"), std::string("ivec3")},
    {std::string("IVEC4"), std::string("ivec4")},
    {std::string("BVEC2"), std::string("bvec2")},
    {std::string("BVEC3"), std::string("bvec3")},
    {std::string("BVEC4"), std::string("bvec4")},
    {std::string("DVEC2"), std::string("dvec2")},
    {std::string("DVEC3"), std::string("dvec3")},
    {std::string("DVEC4"), std::string("dvec4")},
    {std::string("UINT"), std::string("uint")},
    {std::string("UVEC2"), std::string("uvec2")},
    {std::string("UVEC3"), std::string("uvec3")},
    {std::string("UVEC4"), std::string("uvec4")},
    {std::string("LOWP"), std::string("lowp")},
    {std::string("MEDIUMP"), std::string("mediump")},
    {std::string("HIGHP"), std::string("highp")},
    {std::string("PRECISION"), std::string("precision")},
    {std::string("SAMPLER1D"), std::string("sampler1D")},
    {std::string("SAMPLER2D"), std::string("sampler2D")},
    {std::string("SAMPLER3D"), std::string("sampler3D")},
    {std::string("SAMPLERCUBE"), std::string("samplerCube")},
    {std::string("SAMPLER1DSHADOW"), std::string("sampler1DShadow")},
    {std::string("SAMPLER2DSHADOW"), std::string("sampler2DShadow")},
    {std::string("SAMPLERCUBESHADOW"), std::string("samplerCubeShadow")},
    {std::string("SAMPLER1DARRAY"), std::string("sampler1DArray")},
    {std::string("SAMPLER2DARRAY"), std::string("sampler2DArray")},
    {std::string("SAMPLER1DARRAYSHADOW"), std::string("sampler1DArrayShadow")},
    {std::string("SAMPLER2DARRAYSHADOW"), std::string("sampler2DArrayShadow")},
    {std::string("ISAMPLER1D"), std::string("isampler1D")},
    {std::string("ISAMPLER2D"), std::string("isampler2D")},
    {std::string("ISAMPLER3D"), std::string("isampler3D")},
    {std::string("ISAMPLERCUBE"), std::string("isamplerCube")},
    {std::string("ISAMPLER1DARRAY"), std::string("isampler1DArray")},
    {std::string("ISAMPLER2DARRAY"), std::string("isampler2DArray")},
    {std::string("USAMPLER1D"), std::string("usampler1D")},
    {std::string("USAMPLER2D"), std::string("usampler2D")},
    {std::string("USAMPLER3D"), std::string("usampler3D")},
    {std::string("USAMPLERCUBE"), std::string("usamplerCube")},
    {std::string("USAMPLER1DARRAY"), std::string("usampler1DArray")},
    {std::string("USAMPLER2DARRAY"), std::string("usampler2DArray")},
    {std::string("SAMPLER2DRECT"), std::string("sampler2DRect")},
    {std::string("SAMPLER2DRECTSHADOW"), std::string("sampler2DRectShadow")},
    {std::string("ISAMPLER2DRECT"), std::string("isampler2DRect")},
    {std::string("USAMPLER2DRECT"), std::string("usampler2DRect")},
    {std::string("SAMPLERBUFFER"), std::string("samplerBuffer")},
    {std::string("ISAMPLERBUFFER"), std::string("isamplerBuffer")},
    {std::string("USAMPLERBUFFER"), std::string("usamplerBuffer")},
    {std::string("SAMPLER2DMS"), std::string("sampler2DMS")},
    {std::string("ISAMPLER2DMS"), std::string("isampler2DMS")},
    {std::string("USAMPLER2DMS"), std::string("usampler2DMS")},
    {std::string("SAMPLER2DMSARRAY"), std::string("sampler2DMSArray")},
    {std::string("ISAMPLER2DMSARRAY"), std::string("isampler2DMSArray")},
    {std::string("USAMPLER2DMSARRAY"), std::string("usampler2DMSArray")},
    {std::string("SAMPLERCUBEARRAY"), std::string("samplerCubeArray")},
    {std::string("SAMPLERCUBEARRAYSHADOW"), std::string("samplerCubeArrayShadow")},
    {std::string("ISAMPLERCUBEARRAY"), std::string("isamplerCubeArray")},
    {std::string("USAMPLERCUBEARRAY"), std::string("usamplerCubeArray")},
    {std::string("IMAGE1D"), std::string("image1D")},
    {std::string("IIMAGE1D"), std::string("iimage1D")},
    {std::string("UIMAGE1D"), std::string("uimage1D")},
    {std::string("IMAGE2D"), std::string("image2D")},
    {std::string("IIMAGE2D"), std::string("iimage2D")},
    {std::string("UIMAGE2D"), std::string("uimage2D")},
    {std::string("IMAGE3D"), std::string("image3D")},
    {std::string("IIMAGE3D"), std::string("iimage3D")},
    {std::string("UIMAGE3D"), std::string("uimage3D")},
    {std::string("IMAGE2DRECT"), std::string("image2DRect")},
    {std::string("IIMAGE2DRECT"), std::string("iimage2DRect")},
    {std::string("UIMAGE2DRECT"), std::string("uimage2DRect")},
    {std::string("IMAGECUBE"), std::string("imageCube")},
    {std::string("IIMAGECUBE"), std::string("iimageCube")},
    {std::string("UIMAGECUBE"), std::string("uimageCube")},
    {std::string("IMAGEBUFFER"), std::string("imageBuffer")},
    {std::string("IIMAGEBUFFER"), std::string("iimageBuffer")},
    {std::string("UIMAGEBUFFER"), std::string("uimageBuffer")},
    {std::string("IMAGE1DARRAY"), std::string("image1DArray")},
    {std::string("IIMAGE1DARRAY"), std::string("iimage1DArray")},
    {std::string("UIMAGE1DARRAY"), std::string("uimage1DArray")},
    {std::string("IMAGE2DARRAY"), std::string("image2DArray")},
    {std::string("IIMAGE2DARRAY"), std::string("iimage2DArray")},
    {std::string("UIMAGE2DARRAY"), std::string("uimage2DArray")},
    {std::string("IMAGECUBEARRAY"), std::string("imageCubeArray")},
    {std::string("IIMAGECUBEARRAY"), std::string("iimageCubeArray")},
    {std::string("UIMAGECUBEARRAY"), std::string("uimageCubeArray")},
    {std::string("IMAGE2DMS"), std::string("image2DMS")},
    {std::string("IIMAGE2DMS"), std::string("iimage2DMS")},
    {std::string("UIMAGE2DMS"), std::string("uimage2DMS")},
    {std::string("IMAGE2DMSARRAY"), std::string("image2DMSArray")},
    {std::string("IIMAGE2DMSARRAY"), std::string("iimage2DMSArray")},
    {std::string("UIMAGE2DMSARRAY"), std::string("uimage2DMSArray")},
    {std::string("STRUCT"), std::string("struct")},
    {std::string("TRUE_VALUE"), std::string("true")},
    {std::string("FALSE_VALUE"), std::string("false")},
    {std::string("IDENTIFIER"),
     std::string("[_a-zA-Z]([_a-zA-Z]|[0-9])*")},
    {std::string("INTEGER_CONSTANT"),
     std::string("[0-9]+")},
    {std::string("FLOATING_CONSTANT"),
     std::string("[0-9]+\.[0-9]+")},
};

std::vector<Lexeme> Tokenizer::tokenize(std::string source)
{
    std::vector<std::string> pieces = split(source);
    std::vector<Lexeme> lexemes;
    for (auto it = pieces.begin(); it != pieces.end(); ++it)
    {
        std::string piece = *it;
        std::string result;

        for (auto i = Tokenizer::tokens.begin(); i != Tokenizer::tokens.end(); ++i)
        {
            try
            {
                Token token = *i;
                std::regex re(token.pattern);
                if (std::regex_match(piece, re))
                {
                    std::cout << piece << " -> " << token.type << " , REGEX: " << token.pattern << std::endl;
                }
            }
            catch (std::regex_error &e)
            {
            }
        }
    }

    return lexemes;
}
} // namespace glsl