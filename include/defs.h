#ifndef DEFS_H
#define DEFS_H

#include <regex>
#include <string>

namespace glsl
{

enum TokenType
{
    SPACE,
    PREPROCESSOR_LINE,
    DIGIT,
    NONDIGIT,
    KEYWORD,
    IDENTIFIER,
    INTEGER_CONSTANT,
    FLOATING_CONSTANT,
    OPERATOR,
    SEMICOLON,
    OPEN_BRACE,
    CLOSE_BRACE,
    GRAMMAR
};

struct Token
{
    std::string name;
    std::string pattern;
    TokenType type;
};

struct Lexeme
{
    Token token;
    size_t line;
    std::string value;
};

const std::vector<Token> tokens = {
    {std::string("VARIABLE_IDENTIFIER"), std::string("<IDENTIFIER>"), TokenType::GRAMMAR},
    {std::string("SPACE"), std::string("\\s+"), TokenType::SPACE},
    {std::string("LEFT_OP"), std::string("<<"), TokenType::OPERATOR},
    {std::string("RIGHT_OP"), std::string(">>"), TokenType::OPERATOR},
    {std::string("INC_OP"), std::string("\\+\\+"), TokenType::OPERATOR},
    {std::string("DEC_OP"), std::string("--"), TokenType::OPERATOR},
    {std::string("LE_OP"), std::string("<="), TokenType::OPERATOR},
    {std::string("GE_OP"), std::string(">="), TokenType::OPERATOR},
    {std::string("EQ_OP"), std::string("=="), TokenType::OPERATOR},
    {std::string("NE_OP"), std::string("!="), TokenType::OPERATOR},
    {std::string("AND_OP"), std::string("&&"), TokenType::OPERATOR},
    {std::string("OR_OP"), std::string("\\|\\|"), TokenType::OPERATOR},
    {std::string("XOR_OP"), std::string("\\^\\^"), TokenType::OPERATOR},
    {std::string("MUL_ASSIGN"), std::string("\\*="), TokenType::OPERATOR},
    {std::string("DIV_ASSIGN"), std::string("\\/="), TokenType::OPERATOR},
    {std::string("ADD_ASSIGN"), std::string("\\+="), TokenType::OPERATOR},
    {std::string("MOD_ASSIGN"), std::string("%="), TokenType::OPERATOR},
    {std::string("LEFT_ASSIGN"), std::string("<<="), TokenType::OPERATOR},
    {std::string("RIGHT_ASSIGN"), std::string(">>="), TokenType::OPERATOR},
    {std::string("AND_ASSIGN"), std::string("&="), TokenType::OPERATOR},
    {std::string("XOR_ASSIGN"), std::string("\\^="), TokenType::OPERATOR},
    {std::string("OR_ASSIGN"), std::string("\\|="), TokenType::OPERATOR},
    {std::string("SUB_ASSIGN"), std::string("-="), TokenType::OPERATOR},
    {std::string("PLUS"), std::string("\\+"), TokenType::OPERATOR},
    {std::string("DASH"), std::string("-"), TokenType::OPERATOR},
    {std::string("PERCENT"), std::string("%"), TokenType::OPERATOR},
    {std::string("STAR"), std::string("\\*"), TokenType::OPERATOR},
    {std::string("SLASH"), std::string("\\/"), TokenType::OPERATOR},
    {std::string("TILDE"), std::string("~"), TokenType::OPERATOR},
    {std::string("BANG"), std::string("!"), TokenType::OPERATOR},
    {std::string("CARET"), std::string("\\^"), TokenType::OPERATOR},
    {std::string("LEFT_PAREN"), std::string("\\("), TokenType::OPERATOR},
    {std::string("RIGHT_PAREN"), std::string("\\)"), TokenType::OPERATOR},
    {std::string("LEFT_BRACE"), std::string("\\{"), TokenType::OPEN_BRACE},
    {std::string("RIGHT_BRACE"), std::string("\\}"), TokenType::CLOSE_BRACE},
    {std::string("SEMICOLON"), std::string(";"), TokenType::SEMICOLON},
    {std::string("LEFT_ANGLE"), std::string("<"), TokenType::OPERATOR},
    {std::string("RIGHT_ANGLE"), std::string(">"), TokenType::OPERATOR},
    {std::string("DOT"), std::string("\\."), TokenType::OPERATOR},
    {std::string("COMMA"), std::string(","), TokenType::OPERATOR},
    {std::string("LEFT_BRACKET"), std::string("\\["), TokenType::OPERATOR},
    {std::string("RIGHT_BRACKET"), std::string("\\]"), TokenType::OPERATOR},
    {std::string("VERTICAL_BAR"), std::string("\\|"), TokenType::OPERATOR},
    {std::string("COLON"), std::string(":"), TokenType::OPERATOR},
    {std::string("EQUAL"), std::string("="), TokenType::OPERATOR},
    {std::string("AMPERSAND"), std::string("&"), TokenType::OPERATOR},
    {std::string("QUESTION"), std::string("\\?"), TokenType::OPERATOR},
    {std::string("CONST"), std::string("const"), TokenType::KEYWORD},
    {std::string("UNIFORM"), std::string("uniform"), TokenType::KEYWORD},
    {std::string("BUFFER"), std::string("buffer"), TokenType::KEYWORD},
    {std::string("SHARED"), std::string("shared"), TokenType::KEYWORD},
    {std::string("COHERENT"), std::string("coherent"), TokenType::KEYWORD},
    {std::string("VOLATILE"), std::string("volatile"), TokenType::KEYWORD},
    {std::string("RESTRICT"), std::string("restrict"), TokenType::KEYWORD},
    {std::string("READONLY"), std::string("readonly"), TokenType::KEYWORD},
    {std::string("WRITEONLY"), std::string("writeonly"), TokenType::KEYWORD},
    {std::string("ATOMIC_UINT"), std::string("atomic_uint"), TokenType::KEYWORD},
    {std::string("LAYOUT"), std::string("layout"), TokenType::KEYWORD},
    {std::string("CENTROID"), std::string("centroid"), TokenType::KEYWORD},
    {std::string("FLAT"), std::string("flat"), TokenType::KEYWORD},
    {std::string("SMOOTH"), std::string("smooth"), TokenType::KEYWORD},
    {std::string("NOPERSPECTIVE"), std::string("noperspective"), TokenType::KEYWORD},
    {std::string("PATCH"), std::string("patch"), TokenType::KEYWORD},
    {std::string("SAMPLE"), std::string("sample"), TokenType::KEYWORD},
    {std::string("BREAK"), std::string("break"), TokenType::KEYWORD},
    {std::string("CONTINUE"), std::string("continue"), TokenType::KEYWORD},
    {std::string("DO"), std::string("do"), TokenType::KEYWORD},
    {std::string("FOR"), std::string("for"), TokenType::KEYWORD},
    {std::string("WHILE"), std::string("while"), TokenType::KEYWORD},
    {std::string("SWITCH"), std::string("switch"), TokenType::KEYWORD},
    {std::string("CASE"), std::string("case"), TokenType::KEYWORD},
    {std::string("DEFAULT"), std::string("default"), TokenType::KEYWORD},
    {std::string("IF"), std::string("if"), TokenType::KEYWORD},
    {std::string("ELSE"), std::string("else"), TokenType::KEYWORD},
    {std::string("SUBROUTINE"), std::string("subroutine"), TokenType::KEYWORD},
    {std::string("IN"), std::string("in"), TokenType::KEYWORD},
    {std::string("OUT"), std::string("out"), TokenType::KEYWORD},
    {std::string("INOUT"), std::string("inout"), TokenType::KEYWORD},
    {std::string("FLOAT"), std::string("float"), TokenType::KEYWORD},
    {std::string("DOUBLE"), std::string("double"), TokenType::KEYWORD},
    {std::string("INT"), std::string("int"), TokenType::KEYWORD},
    {std::string("VOID"), std::string("void"), TokenType::KEYWORD},
    {std::string("BOOL"), std::string("bool"), TokenType::KEYWORD},
    {std::string("INVARIANT"), std::string("invariant"), TokenType::KEYWORD},
    {std::string("PRECISE"), std::string("precise"), TokenType::KEYWORD},
    {std::string("DISCARD"), std::string("discard"), TokenType::KEYWORD},
    {std::string("RETURN"), std::string("return"), TokenType::KEYWORD},
    {std::string("MAT2"), std::string("mat2"), TokenType::KEYWORD},
    {std::string("MAT3"), std::string("mat3"), TokenType::KEYWORD},
    {std::string("MAT4"), std::string("mat4"), TokenType::KEYWORD},
    {std::string("DMAT2"), std::string("dmat2"), TokenType::KEYWORD},
    {std::string("DMAT3"), std::string("dmat3"), TokenType::KEYWORD},
    {std::string("DMAT4"), std::string("dmat4"), TokenType::KEYWORD},
    {std::string("MAT2X2"), std::string("mat2x2"), TokenType::KEYWORD},
    {std::string("MAT2X3"), std::string("mat2x3"), TokenType::KEYWORD},
    {std::string("MAT2X4"), std::string("mat2x4"), TokenType::KEYWORD},
    {std::string("DMAT2X2"), std::string("dmat2x2"), TokenType::KEYWORD},
    {std::string("DMAT2X3"), std::string("dmat2x3"), TokenType::KEYWORD},
    {std::string("DMAT2X4"), std::string("dmat2x4"), TokenType::KEYWORD},
    {std::string("MAT3X2"), std::string("mat3x2"), TokenType::KEYWORD},
    {std::string("MAT3X3"), std::string("mat3x3"), TokenType::KEYWORD},
    {std::string("MAT3X4"), std::string("mat3x4"), TokenType::KEYWORD},
    {std::string("DMAT3X2"), std::string("dmat3x2"), TokenType::KEYWORD},
    {std::string("DMAT3X3"), std::string("dmat3x3"), TokenType::KEYWORD},
    {std::string("DMAT3X4"), std::string("dmat3x4"), TokenType::KEYWORD},
    {std::string("MAT4X2"), std::string("mat4x2"), TokenType::KEYWORD},
    {std::string("MAT4X3"), std::string("mat4x3"), TokenType::KEYWORD},
    {std::string("MAT4X4"), std::string("mat4x4"), TokenType::KEYWORD},
    {std::string("DMAT4X2"), std::string("dmat4x2"), TokenType::KEYWORD},
    {std::string("DMAT4X3"), std::string("dmat4x3"), TokenType::KEYWORD},
    {std::string("DMAT4X4"), std::string("dmat4x4"), TokenType::KEYWORD},
    {std::string("VEC2"), std::string("vec2"), TokenType::KEYWORD},
    {std::string("VEC3"), std::string("vec3"), TokenType::KEYWORD},
    {std::string("VEC4"), std::string("vec4"), TokenType::KEYWORD},
    {std::string("IVEC2"), std::string("ivec2"), TokenType::KEYWORD},
    {std::string("IVEC3"), std::string("ivec3"), TokenType::KEYWORD},
    {std::string("IVEC4"), std::string("ivec4"), TokenType::KEYWORD},
    {std::string("BVEC2"), std::string("bvec2"), TokenType::KEYWORD},
    {std::string("BVEC3"), std::string("bvec3"), TokenType::KEYWORD},
    {std::string("BVEC4"), std::string("bvec4"), TokenType::KEYWORD},
    {std::string("DVEC2"), std::string("dvec2"), TokenType::KEYWORD},
    {std::string("DVEC3"), std::string("dvec3"), TokenType::KEYWORD},
    {std::string("DVEC4"), std::string("dvec4"), TokenType::KEYWORD},
    {std::string("UINT"), std::string("uint"), TokenType::KEYWORD},
    {std::string("UVEC2"), std::string("uvec2"), TokenType::KEYWORD},
    {std::string("UVEC3"), std::string("uvec3"), TokenType::KEYWORD},
    {std::string("UVEC4"), std::string("uvec4"), TokenType::KEYWORD},
    {std::string("LOWP"), std::string("lowp"), TokenType::KEYWORD},
    {std::string("MEDIUMP"), std::string("mediump"), TokenType::KEYWORD},
    {std::string("HIGHP"), std::string("highp"), TokenType::KEYWORD},
    {std::string("PRECISION"), std::string("precision"), TokenType::KEYWORD},
    {std::string("SAMPLER1D"), std::string("sampler1D"), TokenType::KEYWORD},
    {std::string("SAMPLER2D"), std::string("sampler2D"), TokenType::KEYWORD},
    {std::string("SAMPLER3D"), std::string("sampler3D"), TokenType::KEYWORD},
    {std::string("SAMPLERCUBE"), std::string("samplerCube"), TokenType::KEYWORD},
    {std::string("SAMPLER1DSHADOW"), std::string("sampler1DShadow"), TokenType::KEYWORD},
    {std::string("SAMPLER2DSHADOW"), std::string("sampler2DShadow"), TokenType::KEYWORD},
    {std::string("SAMPLERCUBESHADOW"), std::string("samplerCubeShadow"), TokenType::KEYWORD},
    {std::string("SAMPLER1DARRAY"), std::string("sampler1DArray"), TokenType::KEYWORD},
    {std::string("SAMPLER2DARRAY"), std::string("sampler2DArray"), TokenType::KEYWORD},
    {std::string("SAMPLER1DARRAYSHADOW"), std::string("sampler1DArrayShadow"), TokenType::KEYWORD},
    {std::string("SAMPLER2DARRAYSHADOW"), std::string("sampler2DArrayShadow"), TokenType::KEYWORD},
    {std::string("ISAMPLER1D"), std::string("isampler1D"), TokenType::KEYWORD},
    {std::string("ISAMPLER2D"), std::string("isampler2D"), TokenType::KEYWORD},
    {std::string("ISAMPLER3D"), std::string("isampler3D"), TokenType::KEYWORD},
    {std::string("ISAMPLERCUBE"), std::string("isamplerCube"), TokenType::KEYWORD},
    {std::string("ISAMPLER1DARRAY"), std::string("isampler1DArray"), TokenType::KEYWORD},
    {std::string("ISAMPLER2DARRAY"), std::string("isampler2DArray"), TokenType::KEYWORD},
    {std::string("USAMPLER1D"), std::string("usampler1D"), TokenType::KEYWORD},
    {std::string("USAMPLER2D"), std::string("usampler2D"), TokenType::KEYWORD},
    {std::string("USAMPLER3D"), std::string("usampler3D"), TokenType::KEYWORD},
    {std::string("USAMPLERCUBE"), std::string("usamplerCube"), TokenType::KEYWORD},
    {std::string("USAMPLER1DARRAY"), std::string("usampler1DArray"), TokenType::KEYWORD},
    {std::string("USAMPLER2DARRAY"), std::string("usampler2DArray"), TokenType::KEYWORD},
    {std::string("SAMPLER2DRECT"), std::string("sampler2DRect"), TokenType::KEYWORD},
    {std::string("SAMPLER2DRECTSHADOW"), std::string("sampler2DRectShadow"), TokenType::KEYWORD},
    {std::string("ISAMPLER2DRECT"), std::string("isampler2DRect"), TokenType::KEYWORD},
    {std::string("USAMPLER2DRECT"), std::string("usampler2DRect"), TokenType::KEYWORD},
    {std::string("SAMPLERBUFFER"), std::string("samplerBuffer"), TokenType::KEYWORD},
    {std::string("ISAMPLERBUFFER"), std::string("isamplerBuffer"), TokenType::KEYWORD},
    {std::string("USAMPLERBUFFER"), std::string("usamplerBuffer"), TokenType::KEYWORD},
    {std::string("SAMPLER2DMS"), std::string("sampler2DMS"), TokenType::KEYWORD},
    {std::string("ISAMPLER2DMS"), std::string("isampler2DMS"), TokenType::KEYWORD},
    {std::string("USAMPLER2DMS"), std::string("usampler2DMS"), TokenType::KEYWORD},
    {std::string("SAMPLER2DMSARRAY"), std::string("sampler2DMSArray"), TokenType::KEYWORD},
    {std::string("ISAMPLER2DMSARRAY"), std::string("isampler2DMSArray"), TokenType::KEYWORD},
    {std::string("USAMPLER2DMSARRAY"), std::string("usampler2DMSArray"), TokenType::KEYWORD},
    {std::string("SAMPLERCUBEARRAY"), std::string("samplerCubeArray"), TokenType::KEYWORD},
    {std::string("SAMPLERCUBEARRAYSHADOW"), std::string("samplerCubeArrayShadow"), TokenType::KEYWORD},
    {std::string("ISAMPLERCUBEARRAY"), std::string("isamplerCubeArray"), TokenType::KEYWORD},
    {std::string("USAMPLERCUBEARRAY"), std::string("usamplerCubeArray"), TokenType::KEYWORD},
    {std::string("IMAGE1D"), std::string("image1D"), TokenType::KEYWORD},
    {std::string("IIMAGE1D"), std::string("iimage1D"), TokenType::KEYWORD},
    {std::string("UIMAGE1D"), std::string("uimage1D"), TokenType::KEYWORD},
    {std::string("IMAGE2D"), std::string("image2D"), TokenType::KEYWORD},
    {std::string("IIMAGE2D"), std::string("iimage2D"), TokenType::KEYWORD},
    {std::string("UIMAGE2D"), std::string("uimage2D"), TokenType::KEYWORD},
    {std::string("IMAGE3D"), std::string("image3D"), TokenType::KEYWORD},
    {std::string("IIMAGE3D"), std::string("iimage3D"), TokenType::KEYWORD},
    {std::string("UIMAGE3D"), std::string("uimage3D"), TokenType::KEYWORD},
    {std::string("IMAGE2DRECT"), std::string("image2DRect"), TokenType::KEYWORD},
    {std::string("IIMAGE2DRECT"), std::string("iimage2DRect"), TokenType::KEYWORD},
    {std::string("UIMAGE2DRECT"), std::string("uimage2DRect"), TokenType::KEYWORD},
    {std::string("IMAGECUBE"), std::string("imageCube"), TokenType::KEYWORD},
    {std::string("IIMAGECUBE"), std::string("iimageCube"), TokenType::KEYWORD},
    {std::string("UIMAGECUBE"), std::string("uimageCube"), TokenType::KEYWORD},
    {std::string("IMAGEBUFFER"), std::string("imageBuffer"), TokenType::KEYWORD},
    {std::string("IIMAGEBUFFER"), std::string("iimageBuffer"), TokenType::KEYWORD},
    {std::string("UIMAGEBUFFER"), std::string("uimageBuffer"), TokenType::KEYWORD},
    {std::string("IMAGE1DARRAY"), std::string("image1DArray"), TokenType::KEYWORD},
    {std::string("IIMAGE1DARRAY"), std::string("iimage1DArray"), TokenType::KEYWORD},
    {std::string("UIMAGE1DARRAY"), std::string("uimage1DArray"), TokenType::KEYWORD},
    {std::string("IMAGE2DARRAY"), std::string("image2DArray"), TokenType::KEYWORD},
    {std::string("IIMAGE2DARRAY"), std::string("iimage2DArray"), TokenType::KEYWORD},
    {std::string("UIMAGE2DARRAY"), std::string("uimage2DArray"), TokenType::KEYWORD},
    {std::string("IMAGECUBEARRAY"), std::string("imageCubeArray"), TokenType::KEYWORD},
    {std::string("IIMAGECUBEARRAY"), std::string("iimageCubeArray"), TokenType::KEYWORD},
    {std::string("UIMAGECUBEARRAY"), std::string("uimageCubeArray"), TokenType::KEYWORD},
    {std::string("IMAGE2DMS"), std::string("image2DMS"), TokenType::KEYWORD},
    {std::string("IIMAGE2DMS"), std::string("iimage2DMS"), TokenType::KEYWORD},
    {std::string("UIMAGE2DMS"), std::string("uimage2DMS"), TokenType::KEYWORD},
    {std::string("IMAGE2DMSARRAY"), std::string("image2DMSArray"), TokenType::KEYWORD},
    {std::string("IIMAGE2DMSARRAY"), std::string("iimage2DMSArray"), TokenType::KEYWORD},
    {std::string("UIMAGE2DMSARRAY"), std::string("uimage2DMSArray"), TokenType::KEYWORD},
    {std::string("STRUCT"), std::string("struct"), TokenType::KEYWORD},
    {std::string("TRUE_VALUE"), std::string("true"), TokenType::KEYWORD},
    {std::string("FALSE_VALUE"), std::string("false"), TokenType::KEYWORD},
    {std::string("IDENTIFIER"), std::string("<NONDIGIT>(<NONDIGIT>|<DIGIT>)*"), TokenType::IDENTIFIER},
    {std::string("INTEGER_CONSTANT"), std::string("<DIGIT>"), TokenType::INTEGER_CONSTANT},
    {std::string("FLOATING_CONSTANT"), std::string("<DIGIT>\\.<DIGIT>"), TokenType::FLOATING_CONSTANT},
    {std::string("DIGIT"), std::string("[0-9]+"), TokenType::FLOATING_CONSTANT},
    {std::string("NONDIGIT"), std::string("[_a-zA-Z]+"), TokenType::FLOATING_CONSTANT},
};
}; // namespace glsl
#endif