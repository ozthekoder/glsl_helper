#ifndef DEFS_H
#define DEFS_H

#include <regex>
#include <string>

namespace glsl
{

enum TokenType
{
    CONST,
    BOOL,
    FLOAT,
    INT,
    UINT,
    DOUBLE,
    BVEC2,
    BVEC3,
    BVEC4,
    IVEC2,
    IVEC3,
    IVEC4,
    UVEC2,
    UVEC3,
    UVEC4,
    VEC2,
    VEC3,
    VEC4,
    MAT2,
    MAT3,
    MAT4,
    CENTROID,
    IN,
    OUT,
    INOUT,
    UNIFORM,
    PATCH,
    SAMPLE,
    BUFFER,
    SHARED,
    COHERENT,
    VOLATILE,
    RESTRICT,
    READONLY,
    WRITEONLY,
    NOPERSPECTIVE,
    FLAT,
    SMOOTH,
    LAYOUT,
    MAT2X2,
    MAT2X3,
    MAT2X4,
    MAT3X2,
    MAT3X3,
    MAT3X4,
    MAT4X2,
    MAT4X3,
    MAT4X4,
    DVEC2,
    DVEC3,
    DVEC4,
    DMAT2,
    DMAT3,
    DMAT4,
    DMAT2X2,
    DMAT2X3,
    DMAT2X4,
    DMAT3X2,
    DMAT3X3,
    DMAT3X4,
    DMAT4X2,
    DMAT4X3,
    DMAT4X4,
    ATOMIC_UINT,
    SAMPLER2D,
    SAMPLER3D,
    SAMPLERCUBE,
    SAMPLER2DSHADOW,
    SAMPLERCUBESHADOW,
    SAMPLER2DARRAY,
    SAMPLER2DARRAYSHADOW,
    ISAMPLER2D,
    ISAMPLER3D,
    ISAMPLERCUBE,
    ISAMPLER2DARRAY,
    USAMPLER2D,
    USAMPLER3D,
    USAMPLERCUBE,
    USAMPLER2DARRAY,
    SAMPLER1D,
    SAMPLER1DSHADOW,
    SAMPLER1DARRAY,
    SAMPLER1DARRAYSHADOW,
    ISAMPLER1D,
    ISAMPLER1DARRAY,
    USAMPLER1D,
    USAMPLER1DARRAY,
    SAMPLER2DRECT,
    SAMPLER2DRECTSHADOW,
    ISAMPLER2DRECT,
    USAMPLER2DRECT,
    SAMPLERBUFFER,
    ISAMPLERBUFFER,
    USAMPLERBUFFER,
    SAMPLERCUBEARRAY,
    SAMPLERCUBEARRAYSHADOW,
    ISAMPLERCUBEARRAY,
    USAMPLERCUBEARRAY,
    SAMPLER2DMS,
    ISAMPLER2DMS,
    USAMPLER2DMS,
    SAMPLER2DMSARRAY,
    ISAMPLER2DMSARRAY,
    USAMPLER2DMSARRAY,
    IMAGE2D,
    IIMAGE2D,
    UIMAGE2D,
    IMAGE3D,
    IIMAGE3D,
    UIMAGE3D,
    IMAGECUBE,
    IIMAGECUBE,
    UIMAGECUBE,
    IMAGEBUFFER,
    IIMAGEBUFFER,
    UIMAGEBUFFER,
    IMAGE2DARRAY,
    IIMAGE2DARRAY,
    UIMAGE2DARRAY,
    IMAGECUBEARRAY,
    IIMAGECUBEARRAY,
    UIMAGECUBEARRAY,
    IMAGE1D,
    IIMAGE1D,
    UIMAGE1D,
    IMAGE1DARRAY,
    IIMAGE1DARRAY,
    UIMAGE1DARRAY,
    IMAGE2DRECT,
    IIMAGE2DRECT,
    UIMAGE2DRECT,
    IMAGE2DMS,
    IIMAGE2DMS,
    UIMAGE2DMS,
    IMAGE2DMSARRAY,
    IIMAGE2DMSARRAY,
    UIMAGE2DMSARRAY,
    STRUCT,
    VOID,
    WHILE,
    BREAK,
    CONTINUE,
    DO,
    ELSE,
    FOR,
    IF,
    DISCARD,
    RETURN,
    SWITCH,
    CASE,
    DEFAULT,
    SUBROUTINE,
    IDENTIFIER,
    TYPE_NAME,
    FLOATCONSTANT,
    INTCONSTANT,
    UINTCONSTANT,
    BOOLCONSTANT,
    DOUBLECONSTANT,
    FIELD_SELECTION,
    LEFT_OP,
    RIGHT_OP,
    INC_OP,
    DEC_OP,
    LE_OP,
    GE_OP,
    EQ_OP,
    NE_OP,
    AND_OP,
    OR_OP,
    XOR_OP,
    MUL_ASSIGN,
    DIV_ASSIGN,
    ADD_ASSIGN,
    MOD_ASSIGN,
    LEFT_ASSIGN,
    RIGHT_ASSIGN,
    AND_ASSIGN,
    XOR_ASSIGN,
    OR_ASSIGN,
    SUB_ASSIGN,
    LEFT_PAREN,
    RIGHT_PAREN,
    LEFT_BRACKET,
    RIGHT_BRACKET,
    LEFT_BRACE,
    RIGHT_BRACE,
    DOT,
    COMMA,
    COLON,
    EQUAL,
    SEMICOLON,
    BANG,
    DASH,
    TILDE,
    PLUS,
    STAR,
    SLASH,
    PERCENT,
    LEFT_ANGLE,
    RIGHT_ANGLE,
    VERTICAL_BAR,
    CARET,
    AMPERSAND,
    QUESTION,
    INVARIANT,
    PRECISE,
    HIGH_PRECISION,
    MEDIUM_PRECISION,
    LOW_PRECISION,
    PRECISION,
    NONDIGIT,
    DIGIT,
    VARIABLE_IDENTIFIER,
    EXPRESSION,
    POSTFIX_EXPRESSION,
    PRIMARY_EXPRESSION,
    INTEGER_EXPRESSION,
    FUNCTION_CALL,
    FUNCTION_CALL_OR_METHOD,
    FUNCTION_CALL_GENERIC,
    FUNCTION_CALL_HEADER_WITH_PARAMETERS,
    FUNCTION_CALL_HEADER_NO_PARAMETERS,
    FUNCTION_CALL_HEADER,
    ASSIGNMENT_EXPRESSION,
    FUNCTION_IDENTIFIER,
    TYPE_SPECIFIER,
    UNARY_EXPRESSION,
    UNARY_OPERATOR,
    MULTIPLICATIVE_EXPRESSION,
    ADDITIVE_EXPRESSION,
    SHIFT_EXPRESSION,
    RELATIONAL_EXPRESSION,
    EQUALITY_EXPRESSION,
    AND_EXPRESSION,
    EXCLUSIVE_OR_EXPRESSION,
    INCLUSIVE_OR_EXPRESSION,
    LOGICAL_AND_EXPRESSION,
    LOGICAL_XOR_EXPRESSION,
    CONDITIONAL_EXPRESSION,
    LOGICAL_OR_EXPRESSION,
    ASSIGNMENT_OPERATOR,
    CONSTANT_EXPRESSION,
    DECLARATION,
    FUNCTION_PROTOTYPE,
    INIT_DECLARATOR_LIST,
    PRECISION_QUALIFIER,
    TYPE_QUALIFIER,
    STRUCT_DECLARATION_LIST,
    ARRAY_SPECIFIER,
    IDENTIFIER_LIST,
    FUNCTION_DECLARATOR,
    FUNCTION_HEADER,
    FUNCTION_HEADER_WITH_PARAMETERS,
    PARAMETER_DECLARATION,
    FULLY_SPECIFIED_TYPE,
    PARAMETER_DECLARATOR,
    PARAMETER_TYPE_SPECIFIER,
    SINGLE_DECLARATION,
    INITIALIZER,
    INVARIANT_QUALIFIER,
    INTERPOLATION_QUALIFIER,
    LAYOUT_QUALIFIER,
    LAYOUT_QUALIFIER_ID_LIST,
    LAYOUT_QUALIFIER_ID,
    PRECISE_QUALIFIER,
    SINGLE_TYPE_QUALIFIER,
    STORAGE_QUALIFIER,
    TYPE_NAME_LIST,
    TYPE_SPECIFIER_NONARRAY,
    STRUCT_SPECIFIER,
    STRUCT_DECLARATION,
    STRUCT_DECLARATOR_LIST,
    STRUCT_DECLARATOR,
    INITIALIZER_LIST,
    DECLARATION_STATEMENT,
    STATEMENT,
    COMPOUND_STATEMENT,
    SIMPLE_STATEMENT,
    EXPRESSION_STATEMENT,
    SELECTION_STATEMENT,
    SWITCH_STATEMENT,
    CASE_LABEL,
    ITERATION_STATEMENT,
    JUMP_STATEMENT,
    STATEMENT_LIST,
    STATEMENT_NO_NEW_SCOPE,
    COMPOUND_STATEMENT_NO_NEW_SCOPE,
    SELECTION_REST_STATEMENT,
    CONDITION,
    SWITCH_STATEMENT_LIST,
    FOR_INIT_STATEMENT,
    FOR_REST_STATEMENT,
    CONDITIONOPT,
    TRANSLATION_UNIT,
    EXTERNAL_DECLARATION,
    FUNCTION_DEFINITION,
};

struct Token
{
    std::string name;
    std::string pattern;
    TokenType type;
};

struct Lexeme
{
    Token token;
    size_t line;
    std::string value;
};

const std::vector<Token> tokens = {
    {std::string("LEFT_OP"), std::string("<<"), TokenType::LEFT_OP},
    {std::string("RIGHT_OP"), std::string(">>"), TokenType::RIGHT_OP},
    {std::string("INC_OP"), std::string("\\+\\+"), TokenType::INC_OP},
    {std::string("DEC_OP"), std::string("--"), TokenType::DEC_OP},
    {std::string("LE_OP"), std::string("<="), TokenType::LE_OP},
    {std::string("GE_OP"), std::string(">="), TokenType::GE_OP},
    {std::string("EQ_OP"), std::string("=="), TokenType::EQ_OP},
    {std::string("NE_OP"), std::string("!="), TokenType::NE_OP},
    {std::string("AND_OP"), std::string("&&"), TokenType::AND_OP},
    {std::string("OR_OP"), std::string("\\|\\|"), TokenType::OR_OP},
    {std::string("XOR_OP"), std::string("\\^\\^"), TokenType::XOR_OP},
    {std::string("MUL_ASSIGN"), std::string("\\*="), TokenType::MUL_ASSIGN},
    {std::string("DIV_ASSIGN"), std::string("\\/="), TokenType::DIV_ASSIGN},
    {std::string("ADD_ASSIGN"), std::string("\\+="), TokenType::ADD_ASSIGN},
    {std::string("MOD_ASSIGN"), std::string("%="), TokenType::MOD_ASSIGN},
    {std::string("LEFT_ASSIGN"), std::string("<<="), TokenType::LEFT_ASSIGN},
    {std::string("RIGHT_ASSIGN"), std::string(">>="), TokenType::RIGHT_ASSIGN},
    {std::string("AND_ASSIGN"), std::string("&="), TokenType::AND_ASSIGN},
    {std::string("XOR_ASSIGN"), std::string("\\^="), TokenType::XOR_ASSIGN},
    {std::string("OR_ASSIGN"), std::string("\\|="), TokenType::OR_ASSIGN},
    {std::string("SUB_ASSIGN"), std::string("-="), TokenType::SUB_ASSIGN},
    {std::string("PLUS"), std::string("\\+"), TokenType::PLUS},
    {std::string("DASH"), std::string("-"), TokenType::DASH},
    {std::string("PERCENT"), std::string("%"), TokenType::PERCENT},
    {std::string("STAR"), std::string("\\*"), TokenType::STAR},
    {std::string("SLASH"), std::string("\\/"), TokenType::SLASH},
    {std::string("TILDE"), std::string("~"), TokenType::TILDE},
    {std::string("BANG"), std::string("!"), TokenType::BANG},
    {std::string("CARET"), std::string("\\^"), TokenType::CARET},
    {std::string("LEFT_PAREN"), std::string("\\("), TokenType::LEFT_PAREN},
    {std::string("RIGHT_PAREN"), std::string("\\)"), TokenType::RIGHT_PAREN},
    {std::string("LEFT_BRACE"), std::string("\\{"), TokenType::LEFT_BRACE},
    {std::string("RIGHT_BRACE"), std::string("\\}"), TokenType::RIGHT_BRACE},
    {std::string("SEMICOLON"), std::string(";"), TokenType::SEMICOLON},
    {std::string("LEFT_ANGLE"), std::string("<"), TokenType::LEFT_ANGLE},
    {std::string("RIGHT_ANGLE"), std::string(">"), TokenType::RIGHT_ANGLE},
    {std::string("DOT"), std::string("\\."), TokenType::DOT},
    {std::string("COMMA"), std::string(","), TokenType::COMMA},
    {std::string("LEFT_BRACKET"), std::string("\\["), TokenType::LEFT_BRACKET},
    {std::string("RIGHT_BRACKET"), std::string("\\]"), TokenType::RIGHT_BRACKET},
    {std::string("VERTICAL_BAR"), std::string("\\|"), TokenType::VERTICAL_BAR},
    {std::string("COLON"), std::string(":"), TokenType::COLON},
    {std::string("EQUAL"), std::string("="), TokenType::EQUAL},
    {std::string("AMPERSAND"), std::string("&"), TokenType::AMPERSAND},
    {std::string("QUESTION"), std::string("\\?"), TokenType::QUESTION},
    {std::string("CONST"), std::string("const"), TokenType::CONST},
    {std::string("UNIFORM"), std::string("uniform"), TokenType::UNIFORM},
    {std::string("BUFFER"), std::string("buffer"), TokenType::BUFFER},
    {std::string("SHARED"), std::string("shared"), TokenType::SHARED},
    {std::string("COHERENT"), std::string("coherent"), TokenType::COHERENT},
    {std::string("VOLATILE"), std::string("volatile"), TokenType::VOLATILE},
    {std::string("RESTRICT"), std::string("restrict"), TokenType::RESTRICT},
    {std::string("READONLY"), std::string("readonly"), TokenType::READONLY},
    {std::string("WRITEONLY"), std::string("writeonly"), TokenType::WRITEONLY},
    {std::string("ATOMIC_UINT"), std::string("atomic_uint"), TokenType::ATOMIC_UINT},
    {std::string("LAYOUT"), std::string("layout"), TokenType::LAYOUT},
    {std::string("CENTROID"), std::string("centroid"), TokenType::CENTROID},
    {std::string("FLAT"), std::string("flat"), TokenType::FLAT},
    {std::string("SMOOTH"), std::string("smooth"), TokenType::SMOOTH},
    {std::string("NOPERSPECTIVE"), std::string("noperspective"), TokenType::NOPERSPECTIVE},
    {std::string("PATCH"), std::string("patch"), TokenType::PATCH},
    {std::string("SAMPLE"), std::string("sample"), TokenType::SAMPLE},
    {std::string("BREAK"), std::string("break"), TokenType::BREAK},
    {std::string("CONTINUE"), std::string("continue"), TokenType::CONTINUE},
    {std::string("DO"), std::string("do"), TokenType::DO},
    {std::string("FOR"), std::string("for"), TokenType::FOR},
    {std::string("WHILE"), std::string("while"), TokenType::WHILE},
    {std::string("SWITCH"), std::string("switch"), TokenType::SWITCH},
    {std::string("CASE"), std::string("case"), TokenType::CASE},
    {std::string("DEFAULT"), std::string("default"), TokenType::DEFAULT},
    {std::string("IF"), std::string("if"), TokenType::IF},
    {std::string("ELSE"), std::string("else"), TokenType::ELSE},
    {std::string("SUBROUTINE"), std::string("subroutine"), TokenType::SUBROUTINE},
    {std::string("IN"), std::string("in"), TokenType::IN},
    {std::string("OUT"), std::string("out"), TokenType::OUT},
    {std::string("INOUT"), std::string("inout"), TokenType::INOUT},
    {std::string("FLOAT"), std::string("float"), TokenType::FLOAT},
    {std::string("DOUBLE"), std::string("double"), TokenType::DOUBLE},
    {std::string("INT"), std::string("int"), TokenType::INT},
    {std::string("VOID"), std::string("void"), TokenType::VOID},
    {std::string("BOOL"), std::string("bool"), TokenType::BOOL},
    {std::string("INVARIANT"), std::string("invariant"), TokenType::INVARIANT},
    {std::string("PRECISE"), std::string("precise"), TokenType::PRECISE},
    {std::string("DISCARD"), std::string("discard"), TokenType::DISCARD},
    {std::string("RETURN"), std::string("return"), TokenType::RETURN},
    {std::string("MAT2"), std::string("mat2"), TokenType::MAT2},
    {std::string("MAT3"), std::string("mat3"), TokenType::MAT3},
    {std::string("MAT4"), std::string("mat4"), TokenType::MAT4},
    {std::string("DMAT2"), std::string("dmat2"), TokenType::DMAT2},
    {std::string("DMAT3"), std::string("dmat3"), TokenType::DMAT3},
    {std::string("DMAT4"), std::string("dmat4"), TokenType::DMAT4},
    {std::string("MAT2X2"), std::string("mat2x2"), TokenType::MAT2X2},
    {std::string("MAT2X3"), std::string("mat2x3"), TokenType::MAT3X3},
    {std::string("MAT2X4"), std::string("mat2x4"), TokenType::MAT2X4},
    {std::string("DMAT2X2"), std::string("dmat2x2"), TokenType::DMAT2X2},
    {std::string("DMAT2X3"), std::string("dmat2x3"), TokenType::DMAT2X3},
    {std::string("DMAT2X4"), std::string("dmat2x4"), TokenType::DMAT2X4},
    {std::string("MAT3X2"), std::string("mat3x2"), TokenType::MAT3X2},
    {std::string("MAT3X3"), std::string("mat3x3"), TokenType::MAT3X3},
    {std::string("MAT3X4"), std::string("mat3x4"), TokenType::MAT3X4},
    {std::string("DMAT3X2"), std::string("dmat3x2"), TokenType::DMAT3X2},
    {std::string("DMAT3X3"), std::string("dmat3x3"), TokenType::DMAT3X3},
    {std::string("DMAT3X4"), std::string("dmat3x4"), TokenType::DMAT3X4},
    {std::string("MAT4X2"), std::string("mat4x2"), TokenType::MAT4X2},
    {std::string("MAT4X3"), std::string("mat4x3"), TokenType::MAT4X3},
    {std::string("MAT4X4"), std::string("mat4x4"), TokenType::MAT4X4},
    {std::string("DMAT4X2"), std::string("dmat4x2"), TokenType::DMAT4X2},
    {std::string("DMAT4X3"), std::string("dmat4x3"), TokenType::DMAT4X3},
    {std::string("DMAT4X4"), std::string("dmat4x4"), TokenType::DMAT4X4},
    {std::string("VEC2"), std::string("vec2"), TokenType::VEC2},
    {std::string("VEC3"), std::string("vec3"), TokenType::VEC3},
    {std::string("VEC4"), std::string("vec4"), TokenType::VEC4},
    {std::string("IVEC2"), std::string("ivec2"), TokenType::IVEC2},
    {std::string("IVEC3"), std::string("ivec3"), TokenType::IVEC3},
    {std::string("IVEC4"), std::string("ivec4"), TokenType::IVEC4},
    {std::string("BVEC2"), std::string("bvec2"), TokenType::BVEC2},
    {std::string("BVEC3"), std::string("bvec3"), TokenType::BVEC3},
    {std::string("BVEC4"), std::string("bvec4"), TokenType::BVEC4},
    {std::string("DVEC2"), std::string("dvec2"), TokenType::BVEC2},
    {std::string("DVEC3"), std::string("dvec3"), TokenType::BVEC3},
    {std::string("DVEC4"), std::string("dvec4"), TokenType::BVEC4},
    {std::string("UINT"), std::string("uint"), TokenType::UINT},
    {std::string("UVEC2"), std::string("uvec2"), TokenType::UVEC2},
    {std::string("UVEC3"), std::string("uvec3"), TokenType::UVEC3},
    {std::string("UVEC4"), std::string("uvec4"), TokenType::UVEC4},
    {std::string("LOWP"), std::string("lowp"), TokenType::LOW_PRECISION},
    {std::string("MEDIUMP"), std::string("mediump"), TokenType::MEDIUM_PRECISION},
    {std::string("HIGHP"), std::string("highp"), TokenType::HIGH_PRECISION},
    {std::string("PRECISION"), std::string("precision"), TokenType::PRECISION},
    {std::string("SAMPLER1D"), std::string("sampler1D"), TokenType::SAMPLER1D},
    {std::string("SAMPLER2D"), std::string("sampler2D"), TokenType::SAMPLER2D},
    {std::string("SAMPLER3D"), std::string("sampler3D"), TokenType::SAMPLER3D},
    {std::string("SAMPLERCUBE"), std::string("samplerCube"), TokenType::SAMPLERCUBE},
    {std::string("SAMPLER1DSHADOW"), std::string("sampler1DShadow"), TokenType::SAMPLER1DSHADOW},
    {std::string("SAMPLER2DSHADOW"), std::string("sampler2DShadow"), TokenType::SAMPLER2DSHADOW},
    {std::string("SAMPLERCUBESHADOW"), std::string("samplerCubeShadow"), TokenType::SAMPLERCUBESHADOW},
    {std::string("SAMPLER1DARRAY"), std::string("sampler1DArray"), TokenType::SAMPLER1DARRAY},
    {std::string("SAMPLER2DARRAY"), std::string("sampler2DArray"), TokenType::SAMPLER2DARRAY},
    {std::string("SAMPLER1DARRAYSHADOW"), std::string("sampler1DArrayShadow"), TokenType::SAMPLER1DARRAYSHADOW},
    {std::string("SAMPLER2DARRAYSHADOW"), std::string("sampler2DArrayShadow"), TokenType::SAMPLER2DARRAYSHADOW},
    {std::string("ISAMPLER1D"), std::string("isampler1D"), TokenType::ISAMPLER1D},
    {std::string("ISAMPLER2D"), std::string("isampler2D"), TokenType::ISAMPLER2D},
    {std::string("ISAMPLER3D"), std::string("isampler3D"), TokenType::ISAMPLER3D},
    {std::string("ISAMPLERCUBE"), std::string("isamplerCube"), TokenType::ISAMPLERCUBE},
    {std::string("ISAMPLER1DARRAY"), std::string("isampler1DArray"), TokenType::ISAMPLER1DARRAY},
    {std::string("ISAMPLER2DARRAY"), std::string("isampler2DArray"), TokenType::ISAMPLER2DARRAY},
    {std::string("USAMPLER1D"), std::string("usampler1D"), TokenType::USAMPLER1D},
    {std::string("USAMPLER2D"), std::string("usampler2D"), TokenType::USAMPLER2D},
    {std::string("USAMPLER3D"), std::string("usampler3D"), TokenType::USAMPLER3D},
    {std::string("USAMPLERCUBE"), std::string("usamplerCube"), TokenType::USAMPLERCUBE},
    {std::string("USAMPLER1DARRAY"), std::string("usampler1DArray"), TokenType::USAMPLER1DARRAY},
    {std::string("USAMPLER2DARRAY"), std::string("usampler2DArray"), TokenType::USAMPLER2DARRAY},
    {std::string("SAMPLER2DRECT"), std::string("sampler2DRect"), TokenType::SAMPLER2DRECT},
    {std::string("SAMPLER2DRECTSHADOW"), std::string("sampler2DRectShadow"), TokenType::SAMPLER2DRECTSHADOW},
    {std::string("ISAMPLER2DRECT"), std::string("isampler2DRect"), TokenType::ISAMPLER2DRECT},
    {std::string("USAMPLER2DRECT"), std::string("usampler2DRect"), TokenType::USAMPLER2DRECT},
    {std::string("SAMPLERBUFFER"), std::string("samplerBuffer"), TokenType::SAMPLERBUFFER},
    {std::string("ISAMPLERBUFFER"), std::string("isamplerBuffer"), TokenType::ISAMPLERBUFFER},
    {std::string("USAMPLERBUFFER"), std::string("usamplerBuffer"), TokenType::USAMPLERBUFFER},
    {std::string("SAMPLER2DMS"), std::string("sampler2DMS"), TokenType::SAMPLER2DMS},
    {std::string("ISAMPLER2DMS"), std::string("isampler2DMS"), TokenType::ISAMPLER2DMS},
    {std::string("USAMPLER2DMS"), std::string("usampler2DMS"), TokenType::USAMPLER2DMS},
    {std::string("SAMPLER2DMSARRAY"), std::string("sampler2DMSArray"), TokenType::SAMPLER2DMSARRAY},
    {std::string("ISAMPLER2DMSARRAY"), std::string("isampler2DMSArray"), TokenType::ISAMPLER2DMSARRAY},
    {std::string("USAMPLER2DMSARRAY"), std::string("usampler2DMSArray"), TokenType::USAMPLER2DMSARRAY},
    {std::string("SAMPLERCUBEARRAY"), std::string("samplerCubeArray"), TokenType::SAMPLERCUBEARRAY},
    {std::string("SAMPLERCUBEARRAYSHADOW"), std::string("samplerCubeArrayShadow"), TokenType::SAMPLERCUBEARRAYSHADOW},
    {std::string("ISAMPLERCUBEARRAY"), std::string("isamplerCubeArray"), TokenType::ISAMPLERCUBEARRAY},
    {std::string("USAMPLERCUBEARRAY"), std::string("usamplerCubeArray"), TokenType::USAMPLERCUBEARRAY},
    {std::string("IMAGE1D"), std::string("image1D"), TokenType::IMAGE1D},
    {std::string("IIMAGE1D"), std::string("iimage1D"), TokenType::IIMAGE1D},
    {std::string("UIMAGE1D"), std::string("uimage1D"), TokenType::UIMAGE1D},
    {std::string("IMAGE2D"), std::string("image2D"), TokenType::IMAGE2D},
    {std::string("IIMAGE2D"), std::string("iimage2D"), TokenType::IIMAGE2D},
    {std::string("UIMAGE2D"), std::string("uimage2D"), TokenType::UIMAGE2D},
    {std::string("IMAGE3D"), std::string("image3D"), TokenType::IMAGE3D},
    {std::string("IIMAGE3D"), std::string("iimage3D"), TokenType::IIMAGE3D},
    {std::string("UIMAGE3D"), std::string("uimage3D"), TokenType::UIMAGE3D},
    {std::string("IMAGE2DRECT"), std::string("image2DRect"), TokenType::IMAGE2DRECT},
    {std::string("IIMAGE2DRECT"), std::string("iimage2DRect"), TokenType::IIMAGE2DRECT},
    {std::string("UIMAGE2DRECT"), std::string("uimage2DRect"), TokenType::UIMAGE2DRECT},
    {std::string("IMAGECUBE"), std::string("imageCube"), TokenType::IMAGECUBE},
    {std::string("IIMAGECUBE"), std::string("iimageCube"), TokenType::IIMAGECUBE},
    {std::string("UIMAGECUBE"), std::string("uimageCube"), TokenType::UIMAGECUBE},
    {std::string("IMAGEBUFFER"), std::string("imageBuffer"), TokenType::IMAGEBUFFER},
    {std::string("IIMAGEBUFFER"), std::string("iimageBuffer"), TokenType::IIMAGEBUFFER},
    {std::string("UIMAGEBUFFER"), std::string("uimageBuffer"), TokenType::UIMAGEBUFFER},
    {std::string("IMAGE1DARRAY"), std::string("image1DArray"), TokenType::IMAGE1DARRAY},
    {std::string("IIMAGE1DARRAY"), std::string("iimage1DArray"), TokenType::IIMAGE1DARRAY},
    {std::string("UIMAGE1DARRAY"), std::string("uimage1DArray"), TokenType::UIMAGE1DARRAY},
    {std::string("IMAGE2DARRAY"), std::string("image2DArray"), TokenType::IMAGE2DARRAY},
    {std::string("IIMAGE2DARRAY"), std::string("iimage2DArray"), TokenType::IIMAGE2DARRAY},
    {std::string("UIMAGE2DARRAY"), std::string("uimage2DArray"), TokenType::UIMAGE2DARRAY},
    {std::string("IMAGECUBEARRAY"), std::string("imageCubeArray"), TokenType::IMAGECUBEARRAY},
    {std::string("IIMAGECUBEARRAY"), std::string("iimageCubeArray"), TokenType::IIMAGECUBEARRAY},
    {std::string("UIMAGECUBEARRAY"), std::string("uimageCubeArray"), TokenType::UIMAGECUBEARRAY},
    {std::string("IMAGE2DMS"), std::string("image2DMS"), TokenType::IMAGE2DMS},
    {std::string("IIMAGE2DMS"), std::string("iimage2DMS"), TokenType::IIMAGE2DMS},
    {std::string("UIMAGE2DMS"), std::string("uimage2DMS"), TokenType::UIMAGE2DMS},
    {std::string("IMAGE2DMSARRAY"), std::string("image2DMSArray"), TokenType::IMAGE2DMSARRAY},
    {std::string("IIMAGE2DMSARRAY"), std::string("iimage2DMSArray"), TokenType::IIMAGE2DMSARRAY},
    {std::string("UIMAGE2DMSARRAY"), std::string("uimage2DMSArray"), TokenType::UIMAGE2DMSARRAY},
    {std::string("STRUCT"), std::string("struct"), TokenType::STRUCT},
    {std::string("IDENTIFIER"), std::string("<NONDIGIT>(<NONDIGIT>|<DIGIT>)*"), TokenType::IDENTIFIER},
    {std::string("INTCONSTANT"), std::string("<DIGIT>"), TokenType::INTCONSTANT},
    {std::string("BOOLCONSTANT"), std::string("false|true"), TokenType::BOOLCONSTANT},
    {std::string("FLOATCONSTANT"), std::string("<DIGIT>\\.<DIGIT>"), TokenType::FLOATCONSTANT},
    {std::string("DIGIT"), std::string("[0-9]+"), TokenType::DIGIT},
    {std::string("NONDIGIT"), std::string("[_a-zA-Z]+"), TokenType::NONDIGIT},
};
}; // namespace glsl
#endif